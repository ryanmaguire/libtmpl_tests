/******************************************************************************
 *                                  LICENSE                                   *
 ******************************************************************************
 *  This file is part of libtmpl_tests.                                       *
 *                                                                            *
 *  libtmpl_tests is free software: you can redistribute it and/or modify     *
 *  it under the terms of the GNU General Public License as published by      *
 *  the Free Software Foundation, either version 3 of the License, or         *
 *  (at your option) any later version.                                       *
 *                                                                            *
 *  libtmpl_tests is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *  GNU General Public License for more details.                              *
 *                                                                            *
 *  You should have received a copy of the GNU General Public License         *
 *  along with libtmpl_tests.  If not, see <https://www.gnu.org/licenses/>.   *
 ******************************************************************************/
#include "../../../libtmpl_tests.h"

/*  This test uses the values from:                                           *
 *      More accurate complex multiplication for embedded processors.         *
 *      Claude-Pierre Jeannerod, Christophe Monat, Laurent Thevenoux          *
 *      12th IEEE International Symposium on Industrial Embedded Systems      *
 *      (SIES 2017), Jun 2017, Toulouse, France.                              *
 *  They provide two complex numbers z = a + ib and w = c + id such that the  *
 *  naive product (ac - bd) + i (ad + bc) has horrible component-wise         *
 *  relative error. They are:                                                 *
 *                                                                            *
 *      z = (1 + 2^-51) + i (1 + 3 * 2^-52)                                   *
 *      w = (1 - 2^-53) + i (1 - 3 * 2^-53)                                   *
 *                                                                            *
 *  The naive product produces zero for the imaginary part, but it should be  *
 *  7 * 2^-110 ~= 1.72 x 10^-31, meaning the relative error for the imaginary *
 *  part is 1. The real part is ~2, meaning the relative error for the whole  *
 *  complex number using either the L1 or L2 norm is ~1.11 x 10^-16, which is *
 *  indeed less than double precision epsilon.                                *
 *                                                                            *
 *  At the time of this writing, libtmpl, like many other libraries and       *
 *  programs, uses the naive product. The algorithm in the paper above to     *
 *  remediate this issue uses the FMA instruction, which libtmpl does not     *
 *  currently implement. This would also slow the computation down            *
 *  considerable for architectures that do not have FMA. There is no current  *
 *  plan to implement the corrected algorithm in libtmpl. Because of this,    *
 *  this test is no run by the "runtest.sh" scripts since the extension is    *
 *  .c.norun, instead of .c.                                                  */
#define inarr0 {    \
    {{1.0000000000000004440892098500626162, 1.0000000000000006661338147750939}}\
}

#define inarr1 {    \
    {{0.99999999999999988897769753748435, 0.999999999999999888977697537484346}}\
}

#define outarr {    \
    {{1.72563323017096332433815623655609E-31, 2.00000000000000066613381477509}}\
}

TMPL_C2_TO_C_ARRAY_EXACT_UNIT_TEST(
    tmpl_ComplexDouble, tmpl_CDouble_Multiply, inarr0, inarr1, outarr
)
